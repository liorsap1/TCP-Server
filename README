

HTTP server
Goals: Get a Job in Your company!
In this programming I write HTTP server.

### Program Description.
There is two source files, server and threadpool.
The server handle the connections with the clients. 
using TCP, a server creates a socket for each client it talks to. In other words, there is always
one socket where the server listens to connections and for each client connection request,
the server opens another socket. In order to enable multithreaded program, the server
create threads that handle the connections with the clients. the server
maintain a limited number of threads as follow by user unput, it construct a thread pool.
the server create the pool of threads in advanced and each time thread
handle a client connection, it take one from the pool or enqueue the request if there is no
available thread in the pool.
so the user inputs goes like this:
Command line usage: server <port> <pool-size> <max-number-of-request>
Port is the port number your server will listen on, pool-size is the number of threads in the
pool and -number-of-request is the maximum number of request your server will handle
before it destroys the pool.
The server
In my program I do:

1. Read request from socket
2. Check input: The request first line contain method, path and protocol.
check that there are 3 tokens and that the last one is one of the
http versions, other checks on the method and the path will be checked later. In
case the request is wrong, I send 400 "Bad Request" respond, as in file 400.txt.
3. I support only the GET method, if I get another method, I return error
message "501 not supported", as in file 501.txt
4. If the requested path does not exist, I return error message "404 Not Found", as in
file 404.txt. The requested path is absolute, I look for the path from
the server root directory. 
5. If path is directory but it does not end with a '/', I return 302 Found response, as in
302.txt. 
6. If path is directory and it ends with a '/', I program to search for index.html
a. If there is such file, I return it.
b. Else, I return the contents of the directory in the format as in file
dir_content.txt.
7. If the path is a file
a. if the file is not regular (using S_ISREG) or the caller has no 'read'
permissions, I send 403 Forbidden response, as in file 403.txt. all the
directories in the path have to have executing permissions.
b. otherwise, return the file, format in file file.txt
When I create a response, I construct it as follow:

First line (version, status, phrase)\r\n
Server: webserver/1.0\r\n
Date: <date>\r\n (more later)
Location: <path>\r\n (only if status is 302)
Content-Type: <type/subtype>\r\n (more later)
Content-Length: <content-length>\r\n
Last-Modified: <last-modification-data>\r\n (more later)
Connection: close\r\n
\r\n

Response in Details:
First line example: HTTP/1.0 200 OK\r\n
Protocol is always HTTP/1.0.
The header "server" contains the server name and it would be webserver/1.0.
In order to construct the date, I use:
 #define RFC1123FMT "%a, %d %b %Y %H:%M:%S GMT"
 time_t now;
 char timebuf[128];
 now = time(NULL); 
 strftime(timebuf, sizeof(timebuf), RFC1123FMT, gmtime(&now));
 //timebuf holds the correct format of the current time.
Location is the new location in case of header 302. In other words, the requested path + "/".
Content type is the mime type of the response body. I use the following function:
char *get_mime_type(char *name)
{
 char *ext = strrchr(name, '.');
 if (!ext) return NULL;
 if (strcmp(ext, ".html") == 0 || strcmp(ext, ".htm") == 0) return "text/html";
 if (strcmp(ext, ".jpg") == 0 || strcmp(ext, ".jpeg") == 0) return "image/jpeg";
 if (strcmp(ext, ".gif") == 0) return "image/gif";
 if (strcmp(ext, ".png") == 0) return "image/png";
 if (strcmp(ext, ".css") == 0) return "text/css";
 if (strcmp(ext, ".au") == 0) return "audio/basic";
 if (strcmp(ext, ".wav") == 0) return "audio/wav";
 if (strcmp(ext, ".avi") == 0) return "video/x-msvideo";
 if (strcmp(ext, ".mpeg") == 0 || strcmp(ext, ".mpg") == 0) return "video/mpeg";
 if (strcmp(ext, ".mp3") == 0) return "audio/mpeg";
 return NULL;
}


Content length is the length of the response body in bytes.
Last modification date is added only when the body is a file or content of a directory. I use the same format as in header date.
Few comments:
1. my server closes connection after sending the response.
2. I Don't use files to send error responses.

The pool is implemented by a queue. When the server gets a connection (getting back from
accept()), it should put the connection in the queue. When there will be available thread
(can be immediately), it will handle this connection (read request and write response).
You should implement the functions in threadpool.h.
The server should first init the thread pool by calling the function create_threadpool(int).
This function gets the size of the pool.
create_threadpool should:
1. I Check the legacy of the parameter.
2. I Create threadpool structure and initialize it:
a. num_thread = given parameter
b. qsize=0
c. threads = pointer to <num_thread> threads
d. qhead = qtail = NULL
e. Init lock and condition variables.
f. shutdown = dont_accept = 0
g. Create the threads with do_work as execution function and the pool as an
argument.
do_work should run in an endless loop and:
1. If destruction process has begun, exit thread
2. If the queue is empty, wait (no job to make)
3. Check again destruction flag.
4. Take the first element from the queue (*work_t)
5. If the queue becomes empty and destruction process wait to begin, signal
destruction process.
6. Call the thread routine.
dispatch gets the pool, pointer to the thread execution routine and argument to thread
execution routine. dispatch should:
1. Create work_t structure and init it with the routine and argument.
2. If destroy function has begun, don't accept new item to the queue
3. Add item to the queue
 
destroy_threadpool
1. Set donâ€™t_accept flag to 1
2. Wait for queue to become empty
3. Set shutdown flag to 1
4. Signal threads that wait on empty queue, so they can wake up, see shutdown flag
and exit.
5. Join all threads
6. Free whatever you have to free.
Program flow:
1. Server creates pool of threads, threads wait for jobs.
2. Server accept a new connection from a client (aka a new socket fd)
3. Server dispatch a job - call dispatch with the main negotiation function and fd as a
parameter. dispatch will add work_t item to the queue.
4. When there will be an available thread, it will takes a job from the queue and run
the negotiation function.


ENGOY!!!!
Lior Sapir
